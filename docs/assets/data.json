{
    "about": {
        "name": "Andy Greenwell",
        "image": "assets/profile.jpg",
        "title": "Incoming Software Engineer @ Wayfair Inc.",
        "address": "Boston College, Chestnut Hill, MA 02467",
        "email": "ajgreenwell20@gmail.com",
        "resume": "assets/resume.pdf",
        "linkedin": "https://www.linkedin.com/in/andy-greenwell-09982b128/",
        "github": "https://github.com/ajgreenwell",
        "description": "Andy Greenwell is a passionate Software Engineer with a demonstrated mastery of fundamental programming concepts. In addition to being a student of life and a driven self-learner, Andy is a strong problem solver and analytical thinker with a proven ability to work effectively within techinical teams. In May of 2020, he graduated <i>Magna Cum Laude</i> from the Boston College Carroll School of Management with a Bachelor of Science in Business Management –– along with two concentrations in Computer Science and Information Systems.",
        "languages": {
            "proficient": "Python, JavaScript, Django, React.js, HTML, CSS, SQL, Git",
            "familiar": "Java, C, OCaml, Node.js, Express.js, Bash"
        }
    },
    "news": [
        {
            "description": "Graduated <i>Magna Cum Laude</i> from the Boston College Carroll School of Management.",
            "date": "May 18, 2020"
        },
        {
            "description": "Finished working as a Software Engineer & Team Lead for the Boston College Computer Science Department.",
            "date": "May 14, 2020"
        },
        {
            "description": "Began developing a large-scale, full stack web app as a Software Engineer & Team Lead for the Boston College Computer Science Department.",
            "date": "January 21, 2020"
        },
        {
            "description": "Accepted a full-time job offer as a Software Engineer at Wayfair Inc.",
            "date": "September 14, 2019"
        },
        {
            "description": "Began working as a Research Associate for <em>Introduction to Programming for Management.</em>",
            "date": "September 5, 2019"
        },
        {
            "description": "Completed a Software Engineering internship at Wayfair Inc.",
            "date": "June 6, 2019"
        },
        {
            "description": "Began interning as a Full Stack Software Engineer at Wayfair Inc.",
            "date": "June 6, 2019"
        },
        {
            "description": "Finished studying abroad in Parma, Italy.",
            "date": "May 15, 2019"
        },
        {
            "description": "Started studying abroad in Parma, Italy.",
            "date": "January 11, 2019"
        },
        {
            "description": "Finished working as a Teaching Assistant for <em>Introduction to Programming for Management.</em>",
            "date": "December 18, 2018"
        },
        {
            "description": "Began working as a Teaching Assistant for <em>Introduction to Programming for Management.</em>",
            "date": "August 28, 2018"
        },
        {
            "description": "Finished co-creating a new Python course for Boston College students, entitled <em>Introduction to Programming for Management.</em>",
            "date": "August 14, 2018"
        },
        {
            "description": "Began working as a Software Developer for the Information Systems Department at Boston College.",
            "date": "March 21, 2018"
        }
    ],
    "projects": [
        {
            "id": "spotify-manager",
            "title": "Spotify Manager",
            "date": "April, 2020 – Present",
            "languages": "React.js",
            "description": "A React.js web app that gives users more control over their Spotify music streaming experience. By logging in with their Spotify credentials, users can view their top songs across various timeframes and automatically generate playlists from them. This app features fully responsive UI design, making it both functional and beautiful on screens of all sizes. Spotify Manager is still in a prototype phase with plenty of room for expansion, but it is currently deployed and available at <a href='https://spotifymanager.com' target='_blank'>spotifymanager.com</a>.",
            "detailedDescription": "In the Spring of 2020, I saw an opportunity to provide listeners with even more control over their music streaming experience. Although Spotify provides a great streaming platform, managing one's music library can be a tedious task at times. As a result, I built a web app that alleviates some of these frustrations by integrating with the Spotify API. This web app is still in a prototype phase with plenty of room for expansion, but it is currently deployed and available at <a href='https://spotifymanager.com' target='_blank'>spotifymanager.com</a>. <br><br> Throughout the development of this project, I focused on honing the following skills: <ol><li>Designing and constructing user interfaces that look beautiful and function seemlessly on devices of all sizes.</li><li>Interfacing with publicly available APIs by making HTTP requests, including 3rd party authentication services, and writing asynchronous javascript.</li></ol>",
            "tags": [{"text": "Frontend", "color": "lightcoral"}, {"text": "Web Development", "color": "lightskyblue"}],
            "github": "https://github.com/ajgreenwell/SpotifyManager",
            "image": "assets/SpotifyManager/SpotifyManager.png"
        },
        {
            "id": "mini-c-compiler",
            "title": "Mini-C Compiler",
            "date": "April, 2020",
            "languages": "OCaml",
            "description": "An implementation of a restricted version of the C programming language. Written in OCaml, this project focused primarily on the code generation phases of the compiler, which are responsible for converting abstract syntax trees (a tree-like representation of the source code) into MIPS architecture assembly code. The vast majority of the compiler was written recursively, given the amount of tree traversals and recursive types involved in the compilation process.",
            "detailedDescription": "An implementation of a restricted version of the C programming language. Written in OCaml, this project focused primarily on the code generation phases of the compiler, which are responsible for converting abstract syntax trees (a tree-like representation of the source code) into MIPS architecture assembly code. The vast majority of the compiler was written recursively, given the amount of tree traversals and recursive types involved in the compilation process. As a result, I had two major takeaways from this project: <ol><li>My ability to solve problems recursively and imagine how problems could be redefined recursively improved greatly. I also got a great deal of practice writing efficient, tail-recursive functions.</li><li>I learned a great deal about how programming languages operate under the hood, giving me a deeper insight into how certain features of a language (such as its type system) can lend themselves better to different problems.</li></ol>",
            "tags": [{"text": "Backend", "color": "lightgreen"}],
            "github": "https://github.com/ajgreenwell/Mini-C-Compiler",
            "image": "assets/Mini-C/Mini-C-Compiler.png"
        },
        {
            "id": "connect-four",
            "title": "Connect Four Game Server",
            "date": "October – December, 2019",
            "languages": "JavaScript (Node.js & Express.js), MongoDB",
            "description": "You can think of this server as a middleman that sits between two client applications that are playing Connet Four against each other. Each client can register new games against other clients, make moves in their active games, and forfeit any active game by making different HTTP requests to the server. <span class='on-the-right'>On the right</span><span class='below'>Below</span> is a more detailed look at the various API endpoints available to clients.",
            "detailedDescription": "While working as a Research Associate for the Boston College Python course entitled <em>Introduction to Programming for Management</em>, the professor decided to create a new final project wherein the students would build rudimentary applications that could play Connect Four against each other. In order to make this possible, he needed to build a backend server to facilitate the games. After helping him design the overall structure of the system and the API through which each student's application could interact with this game server, I decided to build my own version of the server for fun.</p><p>You can think of this server as a middleman that sits between the two client applications playing Connet Four agasint each other. Each client can register new games against other clients, make moves in their active games, and forfeit any active game by making different HTTP requests to the server. As the middleman, the server will validate any data within the request and maintain the integrity of each ongoing game, for example by preventing clients from making illegal moves. <span class='on-the-right'>On the right</span><span class='below'>Below</span> is a more detailed breakdown of these API endpoints.",
            "tags": [{"text": "Backend", "color": "lightgreen"}, {"text": "Web Development", "color": "lightskyblue"}],
            "github": "https://github.com/ajgreenwell/Connect4",
            "image": "assets/ConnectFour/ConnectFour.png"
        },
        {
            "id": "heap-manager",
            "title": "Heap Manager & Garbage Collector",
            "date": "November, 2019",
            "languages": "C",
            "description": "This Heap Manager acts as a software development kit (SDK) for allocating, freeing, garbage collecting, and coelescing dynamic memory blocks. Written in C, it is based heavily upon C's own built-in explicit allocation functions, <em>malloc()</em> and <em>free()</em>, and it attempts to emulate their behavior efficiently.",
            "detailedDescription": "This Heap Manager acts as a prototype for allocating, freeing, garbage collecting, and coelescing dynamic memory blocks. Written in C, it is based heavily upon C's own built-in functions <em>malloc()</em> and <em>free()</em>, and it attempts to emulate their behavior efficiently on a simulated heap.</p><p>In addition to providing its own explicit memory allocators and deallocators, this Heap Manager also includes a prototype for an automatic garbage collector. Whenever run, this garbage collector scans the call stack for any potential pointers to memory blocks on the heap and marks them. It then traverses the heap like a linked list, hopping from one header block to the next, checking each block along the way to see if it is marked. If not, the block is treated as garbage and is automatically deallocated.</p><p>The C language does not include an automatic garbage collector by default. Instead, it puts the onus on the developer to properly deallocate dynamic memory blocks. This garbage collector aims to solve that problem by offerring a way to automatically free up inaccessible memory blocks, thus freeing (pun intended) the developer from this resonsibility.",
            "tags": [{"text": "Backend", "color": "lightgreen"}],
            "github": "https://github.com/ajgreenwell/HeapManager",
            "image": "assets/HeapManager/HeapManager.png"
        },
        {
            "id": "java-class-generator",
            "title": "Java Class Generator",
            "date": "January, 2019",
            "languages": "Python",
            "description": "This code generator is intended to reduce some of the overhead involved in creating Java classes that implement existing interfaces. By accepting Java interface files as input, the Java Class Generator parses these interfaces and automatically produces type-correct skeletons of their corresponding, implementing class files. <span class='on-the-right'>On the right</span><span class='below'>Below</span> is an example of a Java interface and an implementing class skeleton that was produced by the Java Class Generator.",
            "detailedDescription": "After spending months focused on implementing Abstract Data Types in Java, I began to realize how cumbersome and error prone the creation and setup of class files can be. From copying over all the proper methods and import statements, to getting that class declaration compiler-ready, there are lots of opportunities for introducing small bugs to your program –– even before you've begun implementing an interface's methods.</p><p>In an effort to streamline this process, I developed this code generator. By passing an interface file to this application at the command line, a type-correct, compilable skeleton of that interface will be created and stored in the desired directory. That way all you have to worry about is the implementation, rather than wasting time on setup. <span class='on-the-right'>On the right</span><span class='below'>Below</span> is an example of a Java interface and an implementing class skeleton that was produced by the Java Class Generator.",
            "tags": [{"text": "Backend", "color": "lightgreen"}],
            "github": "https://github.com/ajgreenwell/JavaClassGenerator",
            "image": "assets/JavaClassGenerator/JavaClassGenerator.png"
        }
    ]
}